# CMake setup for Unicorn 2.
# By Huitao Chen & Nguyen Anh Quynh, 2019-2020

cmake_minimum_required(VERSION 3.1)

# Workaround to fix wrong compiler on macos.
if ((APPLE) AND (NOT CMAKE_C_COMPILER))
    set(CMAKE_C_COMPILER "/usr/bin/cc")
endif()
project(unicorn C)

set(UNICORN_VERSION_MAJOR 2)
set(UNICORN_VERSION_MINOR 0)
set(UNICORN_VERSION_PATCH 0)

option(UNICORN_BUILD_SHARED "Build shared instead of static library" ON)

if (NOT UNICORN_ARCH)
    # build all architectures
    set(UNICORN_ARCH "arm aarch64 x86")
endif()

string(TOUPPER ${UNICORN_ARCH} UNICORN_ARCH)
string(REPLACE " " ";" UNICORN_ARCH_LIST ${UNICORN_ARCH})

foreach(ARCH_LOOP ${UNICORN_ARCH_LIST})
    set(UNICORN_HAS_${ARCH_LOOP} TRUE)
endforeach(ARCH_LOOP)

include_directories(
    ${CMAKE_BINARY_DIR}
)

include_directories(
    glib_compat
    qemu
    qemu/include
    include
    qemu/tcg
)

if(ANDROID_ABI)
    string(FIND "${ANDROID_ABI}" "arm64" UC_RET)
    file(WRITE ${CMAKE_BINARY_DIR}/adb.sh "#!/bin/bash\n\n# Auto-generated by CMakeLists.txt\n\nadb shell mkdir -p /data/local/tmp/build\n")

    if (${UC_RET} GREATER_EQUAL "0")
        set(UNICORN_TARGET_ARCH "aarch64")
    else()
        string(FIND "${ANDROID_ABI}" "armeabi" UC_RET)

        if (${UC_RET} GREATER_EQUAL "0")
            set(UNICORN_TARGET_ARCH "arm")
        else()
            set(UNICORN_TARGET_ARCH "i386")
        endif()
    endif()
else()
    execute_process(COMMAND ${CMAKE_C_COMPILER} -dM -E -
        INPUT_FILE /dev/null
        OUTPUT_VARIABLE UC_COMPILER_MACRO)

    while(TRUE)
        string(FIND "${UC_COMPILER_MACRO}" "__x86_64__" UC_RET)
        if (${UC_RET} GREATER_EQUAL "0")
            set(UNICORN_TARGET_ARCH "i386")
            string(FIND "${UC_COMPILER_MACRO}" "__ILP32__" UC_RET)
            if (${UC_RET} GREATER_EQUAL "0")
                set(UNICORN_CFLAGS -mx32)
                set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -mx32")
                set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -mx32")
            else()
                set(UNICORN_CFLAGS -m64 -mcx16)
                set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} -m64")
                set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} -m64")
            endif()
            break()
        endif()
        string(FIND "${UC_COMPILER_MACRO}" "__i386__" UC_RET)
        if (${UC_RET} GREATER_EQUAL "0")
            set(UNICORN_TARGET_ARCH "i386")
            break()
        endif()
        string(FIND "${UC_COMPILER_MACRO}" "__arm__" UC_RET)
        if (${UC_RET} GREATER_EQUAL "0")
            set(UNICORN_TARGET_ARCH "arm")
            break()
        endif()
        string(FIND "${UC_COMPILER_MACRO}" "__aarch64__" UC_RET)
        if (${UC_RET} GREATER_EQUAL "0")
            set(UNICORN_TARGET_ARCH "aarch64")
            break()
        endif()
        string(FIND "${UC_COMPILER_MACRO}" "__ia64__" UC_RET)
        if (${UC_RET} GREATER_EQUAL "0")
            set(UNICORN_TARGET_ARCH "ia64")
            break()
        endif()
        string(FIND "${UC_COMPILER_MACRO}" "__s390__" UC_RET)
        if (${UC_RET} GREATER_EQUAL "0")
            set(UNICORN_TARGET_ARCH "s390")
            break()
        endif()
        message(FATAL_ERROR "Unknown host compiler: ${CMAKE_C_COMPILER}.")
    endwhile(TRUE)
endif()

set(EXTRA_CFLAGS "--extra-cflags=")
if (UNICORN_HAS_X86)
    set (EXTRA_CFLAGS "${EXTRA_CFLAGS}-DUNICORN_HAS_X86 ")
endif()
if (UNICORN_HAS_ARM)
    set (EXTRA_CFLAGS "${EXTRA_CFLAGS}-DUNICORN_HAS_ARM -DUNICORN_HAS_ARMEB ")
endif()
if (UNICORN_HAS_AARCH64)
    set (EXTRA_CFLAGS "${EXTRA_CFLAGS}-DUNICORN_HAS_ARM64 -DUNICORN_HAS_ARM64EB ")
endif()

set (EXTRA_CFLAGS "${EXTRA_CFLAGS}-fPIC")
if(ANDROID_ABI)
    set (EXTRA_CFLAGS "${EXTRA_CFLAGS} --target=${CMAKE_C_COMPILER_TARGET}")
    set (EXTRA_CFLAGS "${EXTRA_CFLAGS} --sysroot=${CMAKE_SYSROOT}")
endif()
if (UNICORN_FUZZ)
    set (EXTRA_CFLAGS "${EXTRA_CFLAGS} ${CMAKE_C_FLAGS}")
endif()

set(TARGET_LIST "--target-list=")
if (UNICORN_HAS_X86)
    set (TARGET_LIST "${TARGET_LIST}x86_64-softmmu, ")
endif()
if (UNICORN_HAS_ARM)
    set (TARGET_LIST "${TARGET_LIST}arm-softmmu, armeb-softmmu, ")
endif()
if (UNICORN_HAS_AARCH64)
    set (TARGET_LIST "${TARGET_LIST}aarch64-softmmu, aarch64eb-softmmu, ")
endif()
set (TARGET_LIST "${TARGET_LIST} ")

# GEN config-host.mak & target directories
execute_process(COMMAND sh ${CMAKE_CURRENT_SOURCE_DIR}/qemu/configure
    --cc=${CMAKE_C_COMPILER}
    ${EXTRA_CFLAGS}
    ${TARGET_LIST}
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
)
execute_process(COMMAND sh ${CMAKE_CURRENT_SOURCE_DIR}/qemu/scripts/create_config
    INPUT_FILE ${CMAKE_BINARY_DIR}/config-host.mak
    OUTPUT_FILE ${CMAKE_BINARY_DIR}/config-host.h
)
if (UNICORN_HAS_X86)
    execute_process(COMMAND sh ${CMAKE_CURRENT_SOURCE_DIR}/qemu/scripts/create_config
        INPUT_FILE ${CMAKE_BINARY_DIR}/x86_64-softmmu/config-target.mak
        OUTPUT_FILE ${CMAKE_BINARY_DIR}/x86_64-softmmu/config-target.h
    )
endif()
if (UNICORN_HAS_ARM)
    execute_process(COMMAND sh ${CMAKE_CURRENT_SOURCE_DIR}/qemu/scripts/create_config
        INPUT_FILE ${CMAKE_BINARY_DIR}/arm-softmmu/config-target.mak
        OUTPUT_FILE ${CMAKE_BINARY_DIR}/arm-softmmu/config-target.h
    )
    execute_process(COMMAND sh ${CMAKE_CURRENT_SOURCE_DIR}/qemu/scripts/create_config
        INPUT_FILE ${CMAKE_BINARY_DIR}/armeb-softmmu/config-target.mak
        OUTPUT_FILE ${CMAKE_BINARY_DIR}/armeb-softmmu/config-target.h
    )
endif()
if (UNICORN_HAS_AARCH64)
    execute_process(COMMAND sh ${CMAKE_CURRENT_SOURCE_DIR}/qemu/scripts/create_config
        INPUT_FILE ${CMAKE_BINARY_DIR}/aarch64-softmmu/config-target.mak
        OUTPUT_FILE ${CMAKE_BINARY_DIR}/aarch64-softmmu/config-target.h
    )
    execute_process(COMMAND sh ${CMAKE_CURRENT_SOURCE_DIR}/qemu/scripts/create_config
        INPUT_FILE ${CMAKE_BINARY_DIR}/aarch64eb-softmmu/config-target.mak
        OUTPUT_FILE ${CMAKE_BINARY_DIR}/aarch64eb-softmmu/config-target.h
    )
endif()
add_compile_options(
    ${UNICORN_CFLAGS}
    -I${CMAKE_CURRENT_SOURCE_DIR}/qemu/tcg/${UNICORN_TARGET_ARCH}
    -D_GNU_SOURCE
    -D_FILE_OFFSET_BITS=64
    -D_LARGEFILE_SOURCE
    -Wall
    -fPIC
)
if (APPLE)
    # This warning is disabled by default for gcc and doesn't cause any bug.
    add_compile_options(
        -Wno-missing-braces
    )
endif()


set(UNICORN_ARCH_COMMON
    qemu/exec.c
    qemu/exec-vary.c

    qemu/softmmu/cpus.c
    qemu/softmmu/ioport.c
    qemu/softmmu/memory.c
    qemu/softmmu/memory_mapping.c

    qemu/fpu/softfloat.c

    qemu/tcg/optimize.c
    qemu/tcg/tcg.c
    qemu/tcg/tcg-op.c
    qemu/tcg/tcg-op-gvec.c
    qemu/tcg/tcg-op-vec.c

    qemu/accel/tcg/cpu-exec.c
    qemu/accel/tcg/cpu-exec-common.c
    qemu/accel/tcg/cputlb.c
    qemu/accel/tcg/tcg-all.c
    qemu/accel/tcg/tcg-runtime.c
    qemu/accel/tcg/tcg-runtime-gvec.c
    qemu/accel/tcg/translate-all.c
    qemu/accel/tcg/translator.c
)

if (UNICORN_HAS_X86)
add_library(x86_64-softmmu
    ${UNICORN_ARCH_COMMON}

    qemu/hw/i386/x86.c

    qemu/target/i386/arch_memory_mapping.c
    qemu/target/i386/bpt_helper.c
    qemu/target/i386/cc_helper.c
    qemu/target/i386/cpu.c
    qemu/target/i386/excp_helper.c
    qemu/target/i386/fpu_helper.c
    qemu/target/i386/helper.c
    qemu/target/i386/int_helper.c
    qemu/target/i386/machine.c
    qemu/target/i386/mem_helper.c
    qemu/target/i386/misc_helper.c
    qemu/target/i386/mpx_helper.c
    qemu/target/i386/seg_helper.c
    qemu/target/i386/smm_helper.c
    qemu/target/i386/svm_helper.c
    qemu/target/i386/translate.c
    qemu/target/i386/xsave_helper.c
    qemu/target/i386/unicorn.c
)

target_compile_options(x86_64-softmmu PRIVATE
    -DNEED_CPU_H
    -include x86_64.h
    -I${CMAKE_BINARY_DIR}/x86_64-softmmu
    -I${CMAKE_CURRENT_SOURCE_DIR}/qemu/target/i386
)

# Log and pow
target_link_libraries(x86_64-softmmu m)

endif()

if (UNICORN_HAS_ARM)
add_library(arm-softmmu
    ${UNICORN_ARCH_COMMON}

    qemu/target/arm/cpu.c
    qemu/target/arm/crypto_helper.c
    qemu/target/arm/debug_helper.c
    qemu/target/arm/helper.c
    qemu/target/arm/iwmmxt_helper.c
    qemu/target/arm/m_helper.c
    qemu/target/arm/neon_helper.c
    qemu/target/arm/op_helper.c
    qemu/target/arm/psci.c
    qemu/target/arm/tlb_helper.c
    qemu/target/arm/translate.c
    qemu/target/arm/vec_helper.c
    qemu/target/arm/vfp_helper.c
    qemu/target/arm/unicorn_arm.c
)

target_compile_options(arm-softmmu PRIVATE
    -DNEED_CPU_H
    -include arm.h
    -I${CMAKE_BINARY_DIR}/arm-softmmu
    -I${CMAKE_CURRENT_SOURCE_DIR}/qemu/target/arm
)

add_library(armeb-softmmu
    ${UNICORN_ARCH_COMMON}

    qemu/target/arm/cpu.c
    qemu/target/arm/crypto_helper.c
    qemu/target/arm/debug_helper.c
    qemu/target/arm/helper.c
    qemu/target/arm/iwmmxt_helper.c
    qemu/target/arm/m_helper.c
    qemu/target/arm/neon_helper.c
    qemu/target/arm/op_helper.c
    qemu/target/arm/psci.c
    qemu/target/arm/tlb_helper.c
    qemu/target/arm/translate.c
    qemu/target/arm/vec_helper.c
    qemu/target/arm/vfp_helper.c
    qemu/target/arm/unicorn_arm.c
)

target_compile_options(armeb-softmmu PRIVATE
    -DNEED_CPU_H
    -include armeb.h
    -I${CMAKE_BINARY_DIR}/armeb-softmmu
    -I${CMAKE_CURRENT_SOURCE_DIR}/qemu/target/arm
)
endif()

if (UNICORN_HAS_AARCH64)
add_library(aarch64-softmmu
    ${UNICORN_ARCH_COMMON}

    qemu/target/arm/cpu64.c
    qemu/target/arm/cpu.c
    qemu/target/arm/crypto_helper.c
    qemu/target/arm/debug_helper.c
    qemu/target/arm/helper-a64.c
    qemu/target/arm/helper.c
    qemu/target/arm/iwmmxt_helper.c
    qemu/target/arm/m_helper.c
    qemu/target/arm/neon_helper.c
    qemu/target/arm/op_helper.c
    qemu/target/arm/pauth_helper.c
    qemu/target/arm/psci.c
    qemu/target/arm/sve_helper.c
    qemu/target/arm/tlb_helper.c
    qemu/target/arm/translate-a64.c
    qemu/target/arm/translate.c
    qemu/target/arm/translate-sve.c
    qemu/target/arm/vec_helper.c
    qemu/target/arm/vfp_helper.c
    qemu/target/arm/unicorn_aarch64.c
)

target_compile_options(aarch64-softmmu PRIVATE
    -DNEED_CPU_H
    -include aarch64.h
    -I${CMAKE_BINARY_DIR}/aarch64-softmmu
    -I${CMAKE_CURRENT_SOURCE_DIR}/qemu/target/arm
)

add_library(aarch64eb-softmmu
    ${UNICORN_ARCH_COMMON}

    qemu/target/arm/cpu64.c
    qemu/target/arm/cpu.c
    qemu/target/arm/crypto_helper.c
    qemu/target/arm/debug_helper.c
    qemu/target/arm/helper-a64.c
    qemu/target/arm/helper.c
    qemu/target/arm/iwmmxt_helper.c
    qemu/target/arm/m_helper.c
    qemu/target/arm/neon_helper.c
    qemu/target/arm/op_helper.c
    qemu/target/arm/pauth_helper.c
    qemu/target/arm/psci.c
    qemu/target/arm/sve_helper.c
    qemu/target/arm/tlb_helper.c
    qemu/target/arm/translate-a64.c
    qemu/target/arm/translate.c
    qemu/target/arm/translate-sve.c
    qemu/target/arm/vec_helper.c
    qemu/target/arm/vfp_helper.c
    qemu/target/arm/unicorn_aarch64.c
)

target_compile_options(aarch64eb-softmmu PRIVATE
    -DNEED_CPU_H
    -include aarch64eb.h
    -I${CMAKE_BINARY_DIR}/aarch64eb-softmmu
    -I${CMAKE_CURRENT_SOURCE_DIR}/qemu/target/arm
)

endif()

set(UNICORN_SRCS
    uc.c

    qemu/softmmu/vl.c

    qemu/hw/core/cpu.c
)

set(UNICORN_COMMON_SRCS

    list.c

    glib_compat/glib_compat.c
    glib_compat/gtestutils.c
    glib_compat/garray.c
    glib_compat/gtree.c
    glib_compat/grand.c
    glib_compat/glist.c
    glib_compat/gmem.c
    glib_compat/gpattern.c
    glib_compat/gslice.c

    qemu/util/bitmap.c
    qemu/util/bitops.c
    qemu/util/crc32c.c
    qemu/util/cutils.c
    qemu/util/getauxval.c
    qemu/util/guest-random.c
    qemu/util/host-utils.c
    qemu/util/osdep.c
    qemu/util/qdist.c
    qemu/util/qemu-timer.c
    qemu/util/qemu-timer-common.c
    qemu/util/range.c
    qemu/util/qht.c
    qemu/util/pagesize.c
    qemu/util/cacheinfo.c

    qemu/crypto/aes.c
)

# A workaround to avoid circle dependency between unicorn and *-softmmu
set(UNICORN_COMMON_SRCS
    ${UNICORN_COMMON_SRCS}
    qemu/util/oslib-posix.c
    qemu/util/qemu-thread-posix.c
)

add_library(unicorn-common
    ${UNICORN_COMMON_SRCS}
)

if (NOT ANDROID_ABI)
    target_link_libraries(unicorn-common pthread)
endif()

if (UNICORN_BUILD_SHARED)
    add_library(unicorn SHARED
        ${UNICORN_SRCS}
    )
    if (ANDROID_ABI)
        file(APPEND ${CMAKE_BINARY_DIR}/adb.sh "adb push ./libunicorn.so /data/local/tmp/build/\n")
    endif()
else()
    add_library(unicorn STATIC
        ${UNICORN_SRCS}
    )
endif()

enable_testing()
set(UNICORN_LINK_LIBRARIES ${UNICORN_LINK_LIBRARIES} unicorn-common)
if (UNICORN_HAS_X86)
    set(UNICORN_COMPILE_OPTIONS ${UNICORN_COMPILE_OPTIONS} -DUNICORN_HAS_X86)
    set(UNICORN_LINK_LIBRARIES ${UNICORN_LINK_LIBRARIES} x86_64-softmmu)
    set(UNICORN_SAMPLE_FILE ${UNICORN_SAMPLE_FILE} sample_x86 sample_x86_32_gdt_and_seg_regs sample_batch_reg mem_apis shellcode)
    target_link_libraries(x86_64-softmmu unicorn-common)
    set(UNICORN_TEST_FILE ${UNICORN_TEST_FILE} test_x86)
endif()
if (UNICORN_HAS_ARM)
    set(UNICORN_COMPILE_OPTIONS ${UNICORN_COMPILE_OPTIONS} -DUNICORN_HAS_ARM)
    set(UNICORN_LINK_LIBRARIES ${UNICORN_LINK_LIBRARIES} arm-softmmu armeb-softmmu)
    set(UNICORN_SAMPLE_FILE ${UNICORN_SAMPLE_FILE} sample_arm)
    target_link_libraries(arm-softmmu unicorn-common)
    target_link_libraries(armeb-softmmu unicorn-common)
    set(UNICORN_TEST_FILE ${UNICORN_TEST_FILE} test_arm)
endif()
if (UNICORN_HAS_AARCH64)
    set(UNICORN_COMPILE_OPTIONS ${UNICORN_COMPILE_OPTIONS} -DUNICORN_HAS_ARM64)
    set(UNICORN_LINK_LIBRARIES ${UNICORN_LINK_LIBRARIES} aarch64-softmmu aarch64eb-softmmu)
    set(UNICORN_SAMPLE_FILE ${UNICORN_SAMPLE_FILE} sample_arm64)
    target_link_libraries(aarch64-softmmu unicorn-common)
    target_link_libraries(aarch64eb-softmmu unicorn-common)
    set(UNICORN_TEST_FILE ${UNICORN_TEST_FILE} test_arm64)
endif()

# Extra tests
set(UNICORN_TEST_FILE ${UNICORN_TEST_FILE} test_mem)
set(UNICORN_TEST_FILE ${UNICORN_TEST_FILE} test_ctl)
set(UNICORN_SAMPLE_FILE ${UNICORN_SAMPLE_FILE} sample_ctl)

target_compile_options(unicorn PRIVATE
    ${UNICORN_COMPILE_OPTIONS}
)

if (MINGW)
    set(UNICORN_LINK_LIBRARIES ${UNICORN_LINK_LIBRARIES} pthread)
endif()

target_link_libraries(unicorn PRIVATE
    ${UNICORN_LINK_LIBRARIES}
    m
)
set_target_properties(unicorn PROPERTIES
    VERSION ${UNICORN_VERSION_MAJOR}
    SOVERSION ${UNICORN_VERSION_MAJOR}
)

if(NOT ANDROID_ABI)
    set(SAMPLES_LIB
        unicorn
        pthread
    )
else()
    set(SAMPLES_LIB
        unicorn
    )
endif()


if(UNICORN_FUZZ)
    set(UNICORN_FUZZ_SUFFIX "arm_arm;arm_armbe;arm_thumb;arm64_arm;arm64_armbe;x86_16;x86_32;x86_64")
    set(SAMPLES_LIB ${SAMPLES_LIB} rt)
    foreach(SUFFIX ${UNICORN_FUZZ_SUFFIX})
        add_executable(fuzz_emu_${SUFFIX}
            ${CMAKE_CURRENT_SOURCE_DIR}/tests/fuzz/fuzz_emu_${SUFFIX}.c
            ${CMAKE_CURRENT_SOURCE_DIR}/tests/fuzz/onedir.c
        )
        target_link_libraries(fuzz_emu_${SUFFIX}
            ${SAMPLES_LIB}
        )
    endforeach()
else()
    foreach(SAMPLE_FILE ${UNICORN_SAMPLE_FILE})
        add_executable(${SAMPLE_FILE}
            ${CMAKE_CURRENT_SOURCE_DIR}/samples/${SAMPLE_FILE}.c
        )
        target_link_libraries(${SAMPLE_FILE}
            ${SAMPLES_LIB}
        )
        endforeach(SAMPLE_FILE)

        foreach(TEST_FILE ${UNICORN_TEST_FILE})
        add_executable(${TEST_FILE}
            ${CMAKE_CURRENT_SOURCE_DIR}/tests/unit/${TEST_FILE}.c
        )
        target_link_libraries(${TEST_FILE}
            ${SAMPLES_LIB}
        )
        add_test(${TEST_FILE} ${TEST_FILE})
        if (ANDROID_ABI)
            file(APPEND ${CMAKE_BINARY_DIR}/adb.sh "adb push ${TEST_FILE} /data/local/tmp/build/\n")
            file(APPEND ${CMAKE_BINARY_DIR}/adb.sh "adb shell \"chmod +x /data/local/tmp/build/${TEST_FILE}\"\n")
            file(APPEND ${CMAKE_BINARY_DIR}/adb.sh "adb shell \'LD_LIBRARY_PATH=/data/local/tmp/build:$LD_LIBRARY_PATH /data/local/tmp/build/${TEST_FILE}\' || exit -1\n")
        endif()
    endforeach(TEST_FILE)
endif()

target_include_directories(unicorn PUBLIC
    include
)


include("GNUInstallDirs")
file(GLOB UNICORN_HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/include/unicorn/*.h)
install(TARGETS unicorn
    RUNTIME DESTINATION bin
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR}
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
)
install(FILES ${UNICORN_HEADERS} DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/unicorn)
file(WRITE ${CMAKE_BINARY_DIR}/unicorn.pc "Name: unicorn\n\
Description: Unicorn emulator engine\n\
Version: ${UNICORN_VERSION_MAJOR}.${UNICORN_VERSION_MINOR}.${UNICORN_VERSION_PATCH}\n\
libdir=${CMAKE_INSTALL_FULL_LIBDIR}\n\
includedir=${CMAKE_INSTALL_FULL_INCLUDEDIR}\n\
Libs: -L\$\{libdir\} -lunicorn\n\
Cflags: -I\$\{includedir\}\n"
)
install(FILES ${CMAKE_BINARY_DIR}/unicorn.pc DESTINATION ${CMAKE_INSTALL_LIBDIR}/pkgconfig)
